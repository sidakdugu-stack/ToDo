from typing import Optional, Dict, Any
from uuid import uuid4, UUID
from fastapi import HTTPException, status, Depends
from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials
from pydantic import BaseModel, EmailStr
import secrets
import time
import httpx
import ssl


# –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
class PhoneRequest(BaseModel):
    phone_number: str


class EmailRequest(BaseModel):
    email: EmailStr


class PhoneCodeVerification(BaseModel):
    phone_number: str
    code: str


class EmailCodeVerification(BaseModel):
    email: EmailStr
    code: str


class Token(BaseModel):
    access_token: str
    token_type: str
    user_id: UUID


class User(BaseModel):
    id: UUID
    phone_number: Optional[str] = None
    email: Optional[EmailStr] = None
    created_at: float


# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è SMS/Email API
SMS_API_BASE_URL = "https://msg.ovrx.ru/api"
SMS_ENDPOINT = "/auth-code/sms"
EMAIL_ENDPOINT = "/auth-code/email"

# "–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö" –≤ –ø–∞–º—è—Ç–∏
users_db = {}
phone_codes_db = {}  # {phone_number: {"code": "123456", "expires_at": timestamp}}
email_codes_db = {}  # {email: {"code": "123456", "expires_at": timestamp}}
active_tokens = {}  # {token: user_id}

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
CODE_LENGTH = 6
CODE_EXPIRY = 300  # 5 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö

# –°—Ö–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è Swagger
security = HTTPBearer()


# –ú–æ–¥–µ–ª—å –¥–ª—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
class UserAuth:
    def _init_(self, user_id: UUID):
        self.user_id = user_id


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
def generate_code() -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —à–µ—Å—Ç–∏–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥"""
    return ''.join([str(secrets.randbelow(10)) for _ in range(CODE_LENGTH)])


async def send_sms_code(phone_number: str, code: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ SMS –∫–æ–¥–∞ —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π API"""
    try:
        sms_data = {
            "phone": phone_number,
            "code": code
        }

        url = f"{SMS_API_BASE_URL}{SMS_ENDPOINT}"
        print(f"üì± –û—Ç–ø—Ä–∞–≤–∫–∞ SMS –Ω–∞ URL: {url}")
        print(f"üì± –î–∞–Ω–Ω—ã–µ: {sms_data}")

        ssl_context = ssl.create_default_context()
        ssl_context.check_hostname = False
        ssl_context.verify_mode = ssl.CERT_NONE

        async with httpx.AsyncClient(
                timeout=30.0,
                verify=ssl_context
        ) as client:
            response = await client.post(
                url,
                json=sms_data,
                headers={
                    "Content-Type": "application/json",
                    "User-Agent": "TodoApp/1.1"
                }
            )

            print(f"üì± –û—Ç–≤–µ—Ç –æ—Ç SMS API: {response.status_code} - {response.text}")

            if response.status_code in [200, 201, 202]:
                print(f"‚úÖ SMS —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ {phone_number}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS: {response.status_code}")
                return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ SMS: {e}")
        return False


async def send_email_code(email: str, code: str) -> bool:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –Ω–∞ email —á–µ—Ä–µ–∑ –≤–Ω–µ—à–Ω–∏–π API"""
    try:
        email_data = {
            "email": email,
            "code": code
        }

        url = f"{SMS_API_BASE_URL}{EMAIL_ENDPOINT}"
        print(f"üìß –û—Ç–ø—Ä–∞–≤–∫–∞ Email –Ω–∞ URL: {url}")
        print(f"üìß –î–∞–Ω–Ω—ã–µ: {email_data}")

        ssl_context = ssl.create_default_context()
        ssl_context.check_hostname = False
        ssl_context.verify_mode = ssl.CERT_NONE

        async with httpx.AsyncClient(
                timeout=30.0,
                verify=ssl_context
        ) as client:
            response = await client.post(
                url,
                json=email_data,
                headers={
                    "Content-Type": "application/json",
                    "User-Agent": "TodoApp/1.1"
                }
            )

            print(f"üìß –û—Ç–≤–µ—Ç –æ—Ç Email API: {response.status_code} - {response.text}")

            if response.status_code in [200, 201, 202]:
                print(f"‚úÖ Email —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ {email}")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Email: {response.status_code}")
                return False

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Email: {e}")
        return False


async def get_current_user(credentials: HTTPAuthorizationCredentials = Depends(security)) -> UserAuth:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–æ–∫–µ–Ω—É"""
    token = credentials.credentials
    if token not in active_tokens:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="Invalid token",
            headers={"WWW-Authenticate": "Bearer"},
        )
    return UserAuth(user_id=active_tokens[token])


async def request_sms_code(phone_request: PhoneRequest) -> Dict[str, Any]:
    """–ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone_number = phone_request.phone_number

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if not phone_number or len(phone_number) < 10:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Invalid phone number"
        )

    # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    phone_number = ''.join(filter(str.isdigit, phone_number))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –ª–∏ –∫–æ–¥ –Ω–µ–¥–∞–≤–Ω–æ (–∞–Ω—Ç–∏-—Å–ø–∞–º)
    if phone_number in phone_codes_db:
        existing_code = phone_codes_db[phone_number]
        time_passed = time.time() - (existing_code["expires_at"] - CODE_EXPIRY)
        if time_passed < 60:
            raise HTTPException(
                status_code=status.HTTP_429_TOO_MANY_REQUESTS,
                detail="Please wait before requesting new code"
            )

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
    code = generate_code()
    expires_at = time.time() + CODE_EXPIRY

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥
    phone_codes_db[phone_number] = {
        "code": code,
        "expires_at": expires_at,
        "attempts": 0,
        "created_at": time.time()
    }

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print(f"üîß –ö–æ–¥ –¥–ª—è {phone_number}: {code}")

    # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å SMS
    print(f"üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ SMS...")
    sms_sent = await send_sms_code(phone_number, code)

    if sms_sent:
        return {
            "message": "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ SMS",
            "expires_in": CODE_EXPIRY,
            "phone_number": phone_number
        }
    else:
        return {
            "message": "SMS —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–¥ –Ω–∏–∂–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
            "code": code,
            "expires_in": CODE_EXPIRY,
            "phone_number": phone_number,
            "debug": True
        }


async def request_email_code(email_request: EmailRequest) -> Dict[str, Any]:
    """–ó–∞–ø—Ä–æ—Å –∫–æ–¥–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –ø–æ email"""
    email = email_request.email

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ –ª–∏ –∫–æ–¥ –Ω–µ–¥–∞–≤–Ω–æ (–∞–Ω—Ç–∏-—Å–ø–∞–º)
    if email in email_codes_db:
        existing_code = email_codes_db[email]
        time_passed = time.time() - (existing_code["expires_at"] - CODE_EXPIRY)
        if time_passed < 60:
            raise HTTPException(
                status_code=status.HTTP_429_TOO_MANY_REQUESTS,
                detail="Please wait before requesting new code"
            )

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥
    code = generate_code()
    expires_at = time.time() + CODE_EXPIRY

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–¥
    email_codes_db[email] = {
        "code": code,
        "expires_at": expires_at,
        "attempts": 0,
        "created_at": time.time()
    }

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    print(f"üîß –ö–æ–¥ –¥–ª—è {email}: {code}")

    # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å Email
    print(f"üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ Email...")
    email_sent = await send_email_code(email, code)

    if email_sent:
        return {
            "message": "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email",
            "expires_in": CODE_EXPIRY,
            "email": email
        }
    else:
        return {
            "message": "Email —Å–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–¥ –Ω–∏–∂–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
            "code": code,
            "expires_in": CODE_EXPIRY,
            "email": email,
            "debug": True
        }


async def verify_phone_code(phone_verification: PhoneCodeVerification) -> Token:
    """–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–¥–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    phone_number = phone_verification.phone_number
    code = phone_verification.code

    # –û—á–∏—â–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    phone_number = ''.join(filter(str.isdigit, phone_number))

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
    if phone_number not in phone_codes_db:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Code not requested or expired"
        )

    code_data = phone_codes_db[phone_number]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    if time.time() > code_data["expires_at"]:
        del phone_codes_db[phone_number]
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Code expired"
        )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
    if code_data["code"] != code:
        code_data["attempts"] += 1
        if code_data["attempts"] >= 3:
            del phone_codes_db[phone_number]
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Too many attempts, request new code"
            )
        remaining_attempts = 3 - code_data["attempts"]
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=f"Invalid code. {remaining_attempts} attempts remaining"
        )

    # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
    del phone_codes_db[phone_number]

    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    user = None
    for user_id, user_data in users_db.items():
        if user_data.phone_number == phone_number:
            user = user_data
            break

    if not user:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = uuid4()
        user = User(
            id=user_id,
            phone_number=phone_number,
            email=None,
            created_at=time.time()
        )
        users_db[user_id] = user
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: {phone_number}")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    token = secrets.token_urlsafe(32)
    active_tokens[token] = user.id

    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É: {phone_number}")

    return Token(
        access_token=token,
        token_type="bearer",
        user_id=user.id
    )


async def verify_email_code(email_verification: EmailCodeVerification) -> Token:
    """–í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∫–æ–¥–∞ –¥–ª—è –≤—Ö–æ–¥–∞ –ø–æ email"""
    email = email_verification.email
    code = email_verification.code

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ–¥–∞
    if email not in email_codes_db:
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Code not requested or expired"
        )

    code_data = email_codes_db[email]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    if time.time() > code_data["expires_at"]:
        del email_codes_db[email]
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="Code expired"
        )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥
    if code_data["code"] != code:
        code_data["attempts"] += 1
        if code_data["attempts"] >= 3:
            del email_codes_db[email]
            raise HTTPException(
                status_code=status.HTTP_400_BAD_REQUEST,
                detail="Too many attempts, request new code"
            )
        remaining_attempts = 3 - code_data["attempts"]
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail=f"Invalid code. {remaining_attempts} attempts remaining"
        )

    # –£–¥–∞–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
    del email_codes_db[email]

    # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
    user = None
    for user_id, user_data in users_db.items():
        if user_data.email == email:
            user = user_data
            break

    if not user:
        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = uuid4()
        user = User(
            id=user_id,
            phone_number=None,
            email=email,
            created_at=time.time()
        )
        users_db[user_id] = user
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ email: {email}")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
    token = secrets.token_urlsafe(32)
    active_tokens[token] = user.id

    print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥ –ø–æ email: {email}")

    return Token(
        access_token=token,
        token_type="bearer",
        user_id=user.id
    )


async def logout(current_user: UserAuth) -> Dict[str, str]:
    """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
    tokens_to_remove = []
    for token, user_id in active_tokens.items():
        if user_id == current_user.user_id:
            tokens_to_remove.append(token)

    for token in tokens_to_remove:
        del active_tokens[token]

    return {"message": "Logged out successfully"}


async def get_current_user_info(current_user: UserAuth) -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ"""
    user = users_db.get(current_user.user_id)
    if not user:
        raise HTTPException(status_code=404, detail="User not found")

    return {
        "user_id": user.id,
        "phone_number": user.phone_number,
        "email": user.email,
        "created_at": user.created_at
    }


async def get_auth_stats() -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    return {
        "total_users": len(users_db),
        "phone_codes": len(phone_codes_db),
        "email_codes": len(email_codes_db),
        "active_tokens": len(active_tokens)
    }